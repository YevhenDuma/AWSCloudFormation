{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation template for Web role.",

  "Parameters" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VPC of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "PublicSubnetA" : {
	  "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Public Subnet in AZ A",
      "Type" : "String"
    },
    "PublicSubnetB" : {
	  "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Public Subnet in AZ B",
      "Type" : "String"
    },
    "PublicSubnetC" : {
    "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Public Subnet in AZ B",
      "Type" : "String"
    },
    "PrivateSubnetA" : {
    "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Private Subnet in AZ A",
      "Type" : "String"
    },
    "PrivateSubnetB" : {
    "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Private Subnet in AZ B",
      "Type" : "String"
    },
    "PrivateSubnetC" : {
    "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "Private Subnet in AZ B",
      "Type" : "String"
    },
    "AZs" : {
      "Type" : "List<String>",
      "Description" : "The list of AvailabilityZones for your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list if valid EC2 availability zones for the selected Virtual Private Cloud"
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "HTTPLocation" : {
      "Description" : "Lockdown HTTP access.",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "SSHLocation" : {
      "Description" : "Lockdown SSH access.",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "InstanceCount" : {
      "Description" : "Number of EC2 instances to launch",
      "Type" : "Number"
    },
    "AssociatePublicIpAddress" : {
      "Description" : "Associate Public Ip Address to EC2 instance: true or false.",
      "Type" : "String"
    },
    "MinInstancesInService" : {
      "Description" : "The minimum number of instances that must be in service within the Auto Scaling group while obsolete instances are being terminated.",
      "Type" : "Number"
    },
    "MaxBatchSize" : {
      "Description" : "The maximum number of instances that are terminated at a given time.",
      "Type" : "Number"
    },
    "MinInstanceSize" : {
      "Description" : "The minimum number of instances.",
      "Type" : "Number"
    },
    "MaxInstanceSize" : {
      "Description" : "The maximum number of instances.",
      "Type" : "Number"
    },
    "Cooldown" : {
      "Description" : "Pause time between actions.",
      "Type" : "String"
    },
    "PauseTime" : {
      "Description" : "The amount of time to pause after AWS CloudFormation makes a change to the Auto Scaling group before making additional changes to a resource. For example, the amount of time to pause before adding or removing instances when scaling up or terminating instances in an Auto Scaling group.",
      "Type" : "String"
    },
    "AMI" : {
      "Description" : "Provides the unique ID of the Amazon Machine Image (AMI) that was assigned during registration. Default Amazon linux AMI used.",
      "Type" : "String"
    },
    "SNSTopic" : {
      "Description" : "SNS Topic arn ID",
      "Type" : "String"
    },
    "LoadBalancerScheme" : {
      "Description" : "For load balancers attached to an Amazon VPC, this parameter can be used to specify the type of load balancer to use. Specify internal to create an internal load balancer with a DNS name that resolves to private IP addresses or internet-facing to create a load balancer with a publicly resolvable DNS name, which resolves to public IP addresses.",
      "Type" : "String"
    },
    "LoadBalancerIdleTimemout" : {
      "Description" : "Specifies how long front-end and back-end connections of your load balancer can remain idle.",
      "Type" : "Number"
    },
    "CPUPeriod" : {
      "Description" : "Value for CPUPeriod",
      "Type" : "Number"
    },
    "CPUHighEvaluationPeriods" : {
      "Description" : "Value for CPUHighEvaluationPeriods",
      "Type" : "Number"
    },
    "CPUHighThreshold" : {
      "Description" : "Value for CPUHighThreshold",
      "Type" : "Number"
    },
    "CPULowEvaluationPeriods" : {
      "Description" : "Value for CPULowEvaluationPeriods",
      "Type" : "Number"
    },
    "CPULowThreshold" : {
      "Description" : "Value for CPULowThreshold",
      "Type" : "Number"
    },
    "Version" : {
      "Description" : "Version of deployed release.",
      "Type" : "String"
    },
    "ELBSubdomain" : {
      "Description" : "Subdomain for ELB",
      "Type" : "String"
    },
    "HostedZone" : {
      "Description" : "A hosted zone is a collection of resource record sets hosted by Amazon Route 53.",
      "Type" : "String"
    },
    "AppURL" : {
      "Description" : "URL to download war",
      "Type" : "String"
    },
    "StaticURL" : {
      "Description" : "URL to download static.zip",
      "Type" : "String"
    }
  },

  "Resources" : {

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{ "Ref" : "PrivateSubnetA" }, { "Ref" : "PrivateSubnetB" }, { "Ref" : "PrivateSubnetC" }],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : { "Ref" : "MinInstanceSize" },
        "MaxSize" : { "Ref" : "MaxInstanceSize" },
        "Cooldown" : { "Ref" : "Cooldown" },
        "MetricsCollection": [{
            "Granularity": "1Minute",
            "Metrics": [
               "GroupMinSize",
               "GroupTotalInstances",
               "GroupInServiceInstances"
        ]}],
        "DesiredCapacity" : { "Ref" : "InstanceCount" },
        "Tags" : [ {"Key" : "Name", "Value" : { "Fn::Join" : ["-", [{ "Ref": "AWS::StackName" }, { "Ref": "Version" } ] ]}, "PropagateAtLaunch" : "true" } ],
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": { "Ref" : "MinInstancesInService" },
          "MaxBatchSize": { "Ref" : "MaxBatchSize" },
          "PauseTime" : { "Ref" : "PauseTime" },
          "WaitOnResourceSignals": "true"
        }
      }
    },
	
    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
	  
      "Properties" : {
        "AssociatePublicIpAddress" : { "Ref" : "AssociatePublicIpAddress" },
        "ImageId" : { "Ref" : "AMI" },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "KeyName"        : { "Ref" : "KeyName" },
        "IamInstanceProfile" : { "Ref" : "WebProfile"},
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash\n",
             "warFile='/tmp/companyNews.war'\n",
             "webapps='/usr/share/tomcat7/webapps'\n",
             "zipFile='/tmp/static.zip'\n",
             "webroot='/usr/share/nginx/html'\n",
             "nginxconf='/etc/nginx/nginx.conf'\n",
             "virtualhostconf='/etc/nginx/conf.d/virtual.conf'\n",
             "curl -o $warFile ", { "Ref" : "AppURL" }, "\n",
             "yum update -y\n",
             "yum install tomcat7 -y\n",
             "cp $warFile $webapps/\n",
             "chown -R tomcat:tomcat $webapps/*\n",
             "mkdir -p /Users/dcameron/persistence/files\n",
             "chown -R tomcat:tomcat /Users/dcameron/*\n",
             "service tomcat7 start\n",
             "curl -o $zipFile ", { "Ref" : "StaticURL" }, "\n",
             "yum install nginx -y\n",
             "rm -rf $webroot/*\n",
             "unzip $zipFile -d $webroot/\n",
             "chown -R nginx:nginx $webroot/\n", 
             "echo 'user nginx;' > $nginxconf\n",
             "echo 'worker_processes auto;' >> $nginxconf\n",
             "echo 'error_log /var/log/nginx/error.log;' >> $nginxconf\n",
             "echo 'pid /var/run/nginx.pid;' >> $nginxconf\n",
             "echo 'events {' >> $nginxconf\n",
             "echo 'worker_connections  1024;' >> $nginxconf\n",
             "echo '}' >> $nginxconf\n",
             "echo 'http {' >> $nginxconf\n",
             "echo 'include             /etc/nginx/mime.types;' >> $nginxconf\n",
             "echo 'default_type  application/octet-stream;' >> $nginxconf\n",
             "echo 'sendfile        on;' >> $nginxconf\n",
             "echo 'keepalive_timeout  65;' >> $nginxconf\n",
             "echo 'tcp_nopush          on;' >> $nginxconf\n",
             "echo 'tcp_nodelay         on;' >> $nginxconf\n",
             "echo 'types_hash_max_size 2048;' >> $nginxconf\n",
             "echo 'access_log  /var/log/nginx/access.log;' >> $nginxconf\n",
             "echo 'include /etc/nginx/conf.d/*.conf;' >> $nginxconf\n",
             "echo 'index   index.html index.htm;' >> $nginxconf\n",
             "echo '}' >> $nginxconf\n",
             "echo 'server {' > $virtualhostconf\n",
             "echo 'listen  80;' >> $virtualhostconf\n",
             "echo 'server_name  ", {"Ref" : "ELBSubdomain"}, ".", {"Ref" : "HostedZone"}, ";' >> $virtualhostconf\n",
             "echo  \"root $webapps/companyNews/;\" >> $virtualhostconf\n",
             "echo 'location /companyNews/images/ {' >> $virtualhostconf\n",
             "echo \"alias $webroot/static/images/;\" >> $virtualhostconf\n",
             "echo 'autoindex off;' >> $virtualhostconf\n",
             "echo '}' >> $virtualhostconf\n",
             "echo 'location /companyNews/styles/ {' >> $virtualhostconf\n",
             "echo \"alias $webroot/static/styles/;\" >> $virtualhostconf\n",
             "echo 'autoindex off;' >> $virtualhostconf\n",
             "echo '}' >> $virtualhostconf\n",
             "echo 'location / {' >> $virtualhostconf\n",
             "echo 'proxy_set_header X-Forwarded-Host $host;' >> $virtualhostconf\n",
             "echo 'proxy_set_header X-Forwarded-Server $host;' >> $virtualhostconf\n",
             "echo 'proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> $virtualhostconf\n",
             "echo 'proxy_pass http://127.0.0.1:8080/;' >> $virtualhostconf\n",
             "echo '}' >> $virtualhostconf\n",
             "echo '}' >> $virtualhostconf\n",
             "service nginx start\n",
             "\n",
             "instanceState=\"InService\"\n",
             "state=''\n",
             "instance=`curl http://169.254.169.254/latest/meta-data/instance-id`\n",
             "until [ \"$state\" == $instanceState ]\n",
              "do\n",
             "state=`aws elb describe-instance-health --load-balancer-name ", { "Ref" : "ElasticLoadBalancer" }, " --region ", { "Ref" : "AWS::Region" }," --output text | grep $instance| awk '{print $5}'`\n",
             "echo `date` $state \n",
             "sleep 3\n",
             "done\n",
             "/opt/aws/bin/cfn-signal -e $?",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone" : "true",
        "Scheme" : { "Ref" : "LoadBalancerScheme" },
        "SecurityGroups" : [ { "Ref" : "LoadBalancerSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PublicSubnetA" }, { "Ref" : "PublicSubnetB" }, { "Ref" : "PublicSubnetC" }],
        "ConnectionSettings" : { "IdleTimeout" : { "Ref" : "LoadBalancerIdleTimemout" } },
        "Listeners" : [{
          "LoadBalancerPort" : "22",
          "InstancePort" : "22",
          "Protocol" : "TCP"
        },
        {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        }],
        "HealthCheck" : {
          "Target" : "TCP:80",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "30",
          "Timeout" : "25"
        }
      }
    },

    "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP/HTTPS access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation" }
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : { "Ref" : "HTTPLocation" }
        }],
        "SecurityGroupEgress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        }]
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP and HTTPS access and RDP access",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "LoadBalancerSecurityGroup" } }
        ]
      }
    },
	
	  "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
	
	"WebServerScaleUpPolicyForCpuCredits" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "300",
        "ScalingAdjustment" : "1"
      }
    },
	
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": { "Fn::Join":[ "", [ "Scale-up if CPU > ", { "Ref" : "CPUHighThreshold" }, "% for ", { "Ref" : "CPUPeriod" }, "*", { "Ref" : "CPUHighEvaluationPeriods"}," minutes"]]},
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": { "Ref" : "CPUPeriod" },
        "EvaluationPeriods": { "Ref" : "CPUHighEvaluationPeriods"},
        "Threshold": { "Ref" : "CPUHighThreshold" },
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" }, { "Ref" : "SNSTopic" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
	
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": { "Fn::Join":[ "", [ "Scale-down if CPU > ", { "Ref" : "CPUHighThreshold" }, "% for ", { "Ref" : "CPUPeriod" }, "*", { "Ref" : "CPUHighEvaluationPeriods"}," minutes"]]},
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": { "Ref" : "CPUPeriod" },
        "EvaluationPeriods": { "Ref" : "CPULowEvaluationPeriods" },
        "Threshold": { "Ref" : "CPULowThreshold" },
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" }, { "Ref" : "SNSTopic" } ],
        "Dimensions": [{
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
        }],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    
    "WebRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
           "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "WebPolicy",
          "PolicyDocument": {
            "Version" : "2012-10-17",
              "Statement": [ {
                "Effect": "Allow",
                "Action": "elasticloadbalancing:DescribeInstanceHealth",
                "Resource": "*"
              } ]
            }
        } ]
      }
    },
    "WebProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "WebRole"
        } ]
      }
    },
    "ELBDNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
         "HostedZoneName" : {
            "Fn::Join" : [ "", [
               { "Ref" : "HostedZone" }, "."
            ] ]
         },
         "Comment" : "DNS name for ELB.",  
         "Name" : {
            "Fn::Join" : [ "", [
               {"Ref" : "ELBSubdomain"}, ".",
               {"Ref" : "HostedZone"} ,"."
            ] ]
         },
         "Type" : "CNAME",
         "TTL" : "300",
         "ResourceRecords" : [
            { "Fn::GetAtt" : [ "ElasticLoadBalancer", "CanonicalHostedZoneName" ] }
         ]
      }
   }
  }
}
